import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            EstoqueApp()
        }
    }
}

@Composable
fun EstoqueApp(viewModel: EstoqueViewModel = viewModel()) {
    val produtos = viewModel.produtos.collectAsState()

    Column(modifier = Modifier.padding(16.dp)) {
        ProdutoForm(onAddProduto = viewModel::adicionarProduto)
        Spacer(modifier = Modifier.height(16.dp))
        LazyColumn {
            items(produtos.value.size) { index ->
                val p = produtos.value[index]
                Text("${p.nome} - Quantidade: ${p.quantidade}")
            }
        }
    }
}

@Composable
fun ProdutoForm(onAddProduto: (Produto) -> Unit) {
    var nome by remember { mutableStateOf("") }
    var quantidade by remember { mutableStateOf("") }

    Column {
        OutlinedTextField(
            value = nome,
            onValueChange = { nome = it },
            label = { Text("Nome do Produto") }
        )
        Spacer(modifier = Modifier.height(8.dp))
        OutlinedTextField(
            value = quantidade,
            onValueChange = { quantidade = it },
            label = { Text("Quantidade") }
        )
        Spacer(modifier = Modifier.height(8.dp))
        Button(onClick = {
            val qtd = quantidade.toIntOrNull() ?: 0
            if (nome.isNotBlank() && qtd > 0) {
                onAddProduto(Produto(nome, qtd))
                nome = ""
                quantidade = ""
            }
        }) {
            Text("Adicionar Produto")
        }
    }
}

data class Produto(val nome: String, val quantidade: Int)

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow

class EstoqueViewModel : ViewModel() {
    private val _produtos = MutableStateFlow<List<Produto>>(emptyList())
    val produtos: StateFlow<List<Produto>> = _produtos

    fun adicionarProduto(produto: Produto) {
        _produtos.value = _produtos.value + produto
    }
}

// Desenvolvimento, Gerenciamento de Estado
class EstoqueViewModel : ViewModel() {
    private val _produtos = MutableStateFlow<List<Produto>>(emptyList())
    val produtos: StateFlow<List<Produto>> = _produtos

    fun adicionarProduto(produto: Produto) {
        _produtos.value = _produtos.value + produto
    }

    fun exportarDadosParaCSV() {
        val fileName = "estoque_hering.csv"
        val file = File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS), fileName)

        try {
            val writer = FileWriter(file)
            writer.append("Nome,Quantidade\n")
            for (produto in _produtos.value) {
                writer.append("${produto.nome},${produto.quantidade}\n")
            }
            writer.flush()
            writer.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }
}

data class Produto(val nome: String, val quantidade: Int)


// Testes Locais - Testes simulados para cadastro, exibição e validação de entradas
fun testesSimulados() {
    val viewModel = EstoqueViewModel()

    // Teste 1: Cadastro válido
    val produtoValido = Produto("Camiseta Básica", 10)
    viewModel.adicionarProduto(produtoValido)
    assert(viewModel.produtos.value.contains(produtoValido))

    // Teste 2: Cadastro com nome vazio
    val produtoInvalido1 = Produto("", 5)
    viewModel.adicionarProduto(produtoInvalido1)
    assert(!viewModel.produtos.value.contains(produtoInvalido1)) // Fails no controle UI

    // Teste 3: Cadastro com quantidade zero
    val produtoInvalido2 = Produto("Calça Jeans", 0)
    viewModel.adicionarProduto(produtoInvalido2)
    assert(!viewModel.produtos.value.contains(produtoInvalido2)) // Fails no controle UI

    // Teste 4: Verificação de exibição (simulado)
    viewModel.produtos.value.forEach {
        println("Produto: ${it.nome}, Quantidade: ${it.quantidade}")
    }

    println("Testes finalizados.")
}
